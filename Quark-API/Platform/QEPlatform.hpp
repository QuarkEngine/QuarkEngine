////////////////////////////////////////////////////////////////////////////////////////////////////
/// This file is part of Quark-Engine, licensed under the Apache 2.0 License.
///
/// Copyright (c) 2015-2016 - Quark-Engine developers <https://github.com/QuarkEngine/QuarkEngine>.
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at:
///
/// http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef __QUARK_ENGINE_PLATFORM_HPP__
#define __QUARK_ENGINE_PLATFORM_HPP__

////////////////////////////////////////////////////////////////////////////////////////////////////
/// [HEADER::COMMON]
////////////////////////////////////////////////////////////////////////////////////////////////////
#include <algorithm>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// [HEADER::COLLECTION]
////////////////////////////////////////////////////////////////////////////////////////////////////
#include <unordered_set>
#include <unordered_map>
#include <vector>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// [DEFINITION]
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace QE
{
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Void type
    ////////////////////////////////////////////////////////////////////////////////////////////////
    using Void      = void;            //!< Void type

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Boolean type (true or false)
    ////////////////////////////////////////////////////////////////////////////////////////////////
    using Bool      = bool;            //!< Boolean type (true or false)

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unsigned number types
    ////////////////////////////////////////////////////////////////////////////////////////////////
    using UInt      = std::uintmax_t;  //!< Unsigned number (N bits depending on architecture)
    using UInt8     = std::uint8_t;    //!< Unsigned number (8 bits)
    using UInt16    = std::uint16_t;   //!< Unsigned number (16 bits)
    using UInt32    = std::uint32_t;   //!< Unsigned number (32 bits)
    using UInt64    = std::uint64_t;   //!< Unsigned number (64 bits)

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Signed number types
    ////////////////////////////////////////////////////////////////////////////////////////////////
    using Int       = std::intmax_t;   //!< Signed number (N bits depending on architecture)
    using Int8      = std::int8_t;     //!< Signed number (8 bits)
    using Int16     = std::int16_t;    //!< Signed number (16 bits)
    using Int32     = std::int32_t;    //!< Signed number (32 bits)
    using Int64     = std::int64_t;    //!< Signed number (64 bits)

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// Floating point number types
    ////////////////////////////////////////////////////////////////////////////////////////////////
    using Float32   = float;           //!< Floating point (32 bits)
    using Float64   = double;          //!< Floating point (64 bits)

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// String type
    ////////////////////////////////////////////////////////////////////////////////////////////////
    using String    = std::string;     //!< String (8 bits per character)
}

#endif // __QUARK_ENGINE_PLATFORM_HPP__
